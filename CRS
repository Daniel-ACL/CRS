<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Registro de Servicios</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
  <style>
    /* CSS resumido para brevedad, usa el mismo que ten√≠as antes */
    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0 20px 40px;
      background: linear-gradient(135deg, #f0f4f8, #d9e2ec);
      color: #2c3e50;
      max-width: 900px;
      margin-inline: auto;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    h1 {
      font-size: 2rem;
      margin: 30px 0 15px;
      text-align: center;
      font-weight: 700;
      color: #34495e;
      text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    label {
      display: block;
      margin-top: 20px;
      font-weight: 600;
      color: #34495e;
    }
    input, select {
      padding: 12px 14px;
      width: 100%;
      box-sizing: border-box;
      border: 1.5px solid #a0b9cc;
      border-radius: 10px;
      margin-top: 6px;
      font-size: 1rem;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
      background-color: #fefefe;
    }
    input:focus, select:focus {
      border-color: #3498db;
      outline: none;
      box-shadow: 0 0 8px #3498dbaa;
      background-color: #fff;
    }
    button {
      margin-top: 25px;
      padding: 14px 28px;
      font-size: 1.1rem;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-weight: 700;
      transition: background-color 0.3s ease, box-shadow 0.3s ease;
      user-select: none;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .guardar {
      background-color: #27ae60;
      color: white;
    }
    .guardar:hover {
      background-color: #219150;
      box-shadow: 0 6px 10px rgba(33,145,80,0.5);
    }
    .exportarExcel {
      background-color: #2980b9;
      color: white;
    }
    .exportarExcel:hover {
      background-color: #20699e;
      box-shadow: 0 6px 10px rgba(32,105,158,0.5);
    }
    .borrar {
      background-color: #c0392b;
      color: white;
    }
    .borrar:hover {
      background-color: #9e2a22;
      box-shadow: 0 6px 10px rgba(158,42,34,0.5);
    }
    .editar {
      background-color: #e67e22;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 700;
      transition: background-color 0.3s ease, box-shadow 0.3s ease;
      user-select: none;
      box-shadow: 0 3px 6px rgba(0,0,0,0.12);
    }
    .editar:hover {
      background-color: #cf711b;
      box-shadow: 0 5px 8px rgba(207,113,27,0.5);
    }
    table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      margin-top: 35px;
      font-size: 1rem;
      border-radius: 14px;
      overflow: hidden;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      background: #fff;
    }
    th, td {
      padding: 14px 18px;
      text-align: center;
      border-bottom: 1px solid #ecf0f1;
    }
    th {
      background-color: #3498db;
      color: #fefefe;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    tbody tr:nth-child(even) {
      background-color: #f9fbfc;
    }
    .alerta {
      color: #c0392b;
      font-weight: 700;
      margin-top: 10px;
    }
    .acciones {
      margin-top: 35px;
      display: flex;
      flex-wrap: wrap;
      gap: 18px;
      justify-content: center;
    }
    #toast {
      position: fixed;
      bottom: 30px;
      left: 50%;
      transform: translateX(-50%);
      min-width: 280px;
      max-width: 90vw;
      background-color: #333;
      color: #fff;
      text-align: left;
      border-radius: 10px;
      padding: 16px 20px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 14px;
      opacity: 0;
      visibility: hidden;
      pointer-events: none;
      transition: opacity 0.4s ease, visibility 0.4s ease;
      z-index: 9999;
      user-select: none;
    }
    #toast.show {
      opacity: 1;
      visibility: visible;
      pointer-events: auto;
    }
    #toast svg {
      width: 24px;
      height: 24px;
      flex-shrink: 0;
      fill: currentColor;
    }
    #toast.success {
      background-color: #27ae60;
      color: white;
    }
    #toast.error {
      background-color: #c0392b;
      color: white;
    }
    #toast.warning {
      background-color: #f39c12;
      color: white;
    }
    @media (max-width: 600px) {
      button, input, select {
        font-size: 1.3rem;
        padding: 16px 20px;
      }
      table, thead, tbody, th, td, tr {
        font-size: 0.95rem;
      }
      .acciones {
        flex-direction: column;
        align-items: stretch;
      }
      #toast {
        min-width: 95vw;
        font-size: 1.1rem;
        padding: 18px 24px;
      }
    }

    /* Nuevos estilos para barra de filtros */
    #filtros-container {
      margin-top: 20px;
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
      justify-content: center;
      align-items: flex-end;
    }
    #busqueda {
      flex: 1 1 250px;
      min-width: 220px;
    }
    #filtro-especialista, #filtro-servicio {
      flex: 1 1 180px;
      min-width: 150px;
    }
  </style>
</head>
<body>
  <h1>Registro de Servicios</h1>

  <form id="formulario">
    <label for="paciente">Nombre del paciente:</label>
    <input type="text" id="paciente" required />

    <label for="especialista">Especialista:</label>
    <select id="especialista">
      <option value="">Selecciona especialista</option>
      <option>Lic Juan</option>
      <option>Lic Eduardo</option>
      <option>Lic Diego (psic√≥logo)</option>
      <option>Lic Diego</option>
      <option>Lic Cynthia</option>
      <option>Lic Liliana</option>
      <option>Lic Maria Fernanda</option>
    </select>

    <label for="servicio">Servicio:</label>
    <select id="servicio" required onchange="actualizarOpcionesCosto()">
      <option value="">Selecciona servicio</option>
      <option value="Psicolog√≠a Infantil">Psicolog√≠a Infantil</option>
      <option value="Psicolog√≠a Adulto">Psicolog√≠a Adulto</option>
      <option value="Medico Especialista en rehabilitaci√≥n">Medico Especialista en rehabilitaci√≥n</option>
      <option value="Consulta Medica">Consulta Medica</option>
      <option value="Audiolog√≠a">Audiolog√≠a</option>
      <option value="Estimulaci√≥n temprana">Estimulaci√≥n temprana</option>
      <option value="Nutrici√≥n">Nutrici√≥n</option>
      <option value="Terapia F√≠sica">Terapia F√≠sica</option>
      <option value="Terapia Ocupacional">Terapia Ocupacional</option>
      <option value="Terapia de Lenguaje">Terapia de Lenguaje</option>
    </select>

    <label for="costo">Costo del servicio:</label>
    <select id="costo" required></select>

    <label for="dia">D√≠a:</label>
    <input type="date" id="dia" required />

    <label for="hora-inicio">Hora:</label>
    <input type="time" id="hora-inicio" required /> a <input type="time" id="hora-fin" required />

    <div id="mensaje-error" class="alerta" role="alert" aria-live="assertive"></div>

    <button type="button" class="guardar" onclick="guardarRegistro()">Guardar Registro</button>
    <button
      type="button"
      class="guardar"
      id="btn-cancelar-edicion"
      style="display:none; margin-left:10px;"
      onclick="cancelarEdicion()"
    >
      Cancelar Edici√≥n
    </button>
  </form>

  <div class="acciones">
    <button class="exportarExcel" onclick="exportarExcel()">Exportar Excel</button>
    <button class="borrar" onclick="borrarRegistros()">üóëÔ∏è Borrar todos los registros</button>
  </div>

  <!-- Barra de b√∫squeda y filtros -->
  <div id="filtros-container">
    <input
      type="text"
      id="busqueda"
      placeholder="Buscar por paciente, especialista o servicio..."
      aria-label="Buscar registros"
      oninput="filtrarRegistros()"
    />
    <select id="filtro-especialista" onchange="filtrarRegistros()" aria-label="Filtrar por especialista">
      <option value="">Todos los especialistas</option>
    </select>
    <select id="filtro-servicio" onchange="filtrarRegistros()" aria-label="Filtrar por servicio">
      <option value="">Todos los servicios</option>
    </select>
  </div>

  <h2>Registros</h2>
  <table id="tabla" aria-label="Tabla de registros">
    <thead>
      <tr>
        <th>Paciente</th>
        <th>Especialista</th>
        <th>Servicio</th>
        <th>Costo</th>
        <th>D√≠a</th>
        <th>Hora</th>
        <th>Pago Especialista</th>
        <th>Acciones</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <h2>Ganancias por Especialista</h2>
  <table id="tabla-ganancias" aria-label="Ganancias por especialista">
    <thead>
      <tr>
        <th>Especialista</th>
        <th>Total a Pagar</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <h2>Ganancia para la Oficina</h2>
  <p id="ganancia-oficina" aria-live="polite">$0.00</p>

  <h2>Ganancias por Servicio</h2>
  <table id="tabla-servicios" aria-label="Ganancias por servicio">
    <thead>
      <tr>
        <th>Servicio</th>
        <th>Total Generado</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <div
    id="toast"
    role="alert"
    aria-live="assertive"
    aria-atomic="true"
    aria-relevant="additions"
  ></div>

  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  <script>
    // Referencias a elementos DOM
    const tabla = document.getElementById("tabla").getElementsByTagName("tbody")[0];
    const tablaGanancias = document.getElementById("tabla-ganancias").getElementsByTagName("tbody")[0];
    const tablaServicios = document.getElementById("tabla-servicios").getElementsByTagName("tbody")[0];
    const gananciaOficina = document.getElementById("ganancia-oficina");
    const toast = document.getElementById("toast");

    // Variables globales
    let registros = JSON.parse(localStorage.getItem("registros") || "[]");
    let indiceEditando = null;

    // Precios por servicio
    const preciosServicios = {
      "Psicolog√≠a Infantil": [150, 200],
      "Psicolog√≠a Adulto": [250],
      "Medico Especialista en rehabilitaci√≥n": [350],
      "Consulta Medica": [60],
      "Audiolog√≠a": [50],
      "Estimulaci√≥n temprana": [120],
      "Nutrici√≥n": [200],
      "Terapia F√≠sica": [200],
      "Terapia Ocupacional": [120],
      "Terapia de Lenguaje": [100, 120],
    };

    // Actualiza las opciones de costo seg√∫n el servicio seleccionado
    function actualizarOpcionesCosto() {
      const servicio = document.getElementById("servicio").value;
      const costoSelect = document.getElementById("costo");
      costoSelect.innerHTML = "";
      if (!servicio || !preciosServicios[servicio] || preciosServicios[servicio].length === 0) {
        const opt = document.createElement("option");
        opt.textContent = "Selecciona un servicio primero";
        opt.disabled = true;
        opt.selected = true;
        costoSelect.appendChild(opt);
        return;
      }
      preciosServicios[servicio].forEach((c) => {
        const opt = document.createElement("option");
        opt.value = c;
        opt.textContent = c;
        costoSelect.appendChild(opt);
      });
    }

    // Mostrar notificaciones (toast) con iconos y colores seg√∫n tipo
    function mostrarToast(mensaje, tipo = "success") {
      const icons = {
        success:
          `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"/></svg>`,
        error:
          `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>`,
        warning:
          `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12" y2="17"/></svg>`
      };
      toast.innerHTML = icons[tipo] + `<span style="margin-left:12px;">${mensaje}</span>`;
      toast.className = tipo + " show";
      setTimeout(() => {
        toast.className = toast.className.replace("show", "");
      }, 3500);
    }

    // Guardar o actualizar registro
    function guardarRegistro() {
      const mensaje = document.getElementById("mensaje-error");
      mensaje.textContent = "";

      const paciente = document.getElementById("paciente").value.trim();
      const especialista = document.getElementById("especialista").value;
      const servicio = document.getElementById("servicio").value;
      const costo = parseFloat(document.getElementById("costo").value);
      const dia = document.getElementById("dia").value;
      const horaInicio = document.getElementById("hora-inicio").value;
      const horaFin = document.getElementById("hora-fin").value;

      if (!paciente || !especialista || !servicio || isNaN(costo) || !dia || !horaInicio || !horaFin) {
        mensaje.textContent = "Por favor completa todos los campos antes de guardar.";
        mostrarToast("Error: completa todos los campos.", "error");
        return;
      }

      const hora = horaInicio + " - " + horaFin;
      const pagoEspecialista = calcularPagoEspecialista(servicio, costo, especialista);

      if (indiceEditando === null) {
        registros.push({ paciente, especialista, servicio, costo, dia, hora, pagoEspecialista });
        mostrarToast("Registro guardado con √©xito.", "success");
      } else {
        registros[indiceEditando] = { paciente, especialista, servicio, costo, dia, hora, pagoEspecialista };
        mostrarToast("Registro actualizado con √©xito.", "success");
        indiceEditando = null;
        document.getElementById("btn-cancelar-edicion").style.display = "none";
        document.querySelector(".guardar").textContent = "Guardar Registro";
      }

      localStorage.setItem("registros", JSON.stringify(registros));
      actualizarTabla();
      actualizarGanancias();
      document.getElementById("formulario").reset();
      actualizarOpcionesCosto();
      cargarFiltros();
      filtrarRegistros();
    }

    // Editar registro
    function editarRegistro(i) {
      const r = registros[i];
      indiceEditando = i;
      document.getElementById("paciente").value = r.paciente;
      document.getElementById("especialista").value = r.especialista;
      document.getElementById("servicio").value = r.servicio;
      actualizarOpcionesCosto();
      document.getElementById("costo").value = r.costo;
      document.getElementById("dia").value = r.dia;
      const horas = r.hora.split(" - ");
      document.getElementById("hora-inicio").value = horas[0];
      document.getElementById("hora-fin").value = horas[1];
      document.querySelector(".guardar").textContent = "Actualizar Registro";
      document.getElementById("btn-cancelar-edicion").style.display = "inline-block";
      document.getElementById("mensaje-error").textContent = "";
    }

    // Cancelar edici√≥n
    function cancelarEdicion() {
      indiceEditando = null;
      document.getElementById("formulario").reset();
      actualizarOpcionesCosto();
      document.querySelector(".guardar").textContent = "Guardar Registro";
      document.getElementById("btn-cancelar-edicion").style.display = "none";
      document.getElementById("mensaje-error").textContent = "";
    }

    // Actualizar tabla con todos los registros o filtrados
    function actualizarTabla(filtrados = null) {
      const lista = filtrados || registros;
      tabla.innerHTML = "";
      lista.forEach((r, i) => {
        const fila = tabla.insertRow();
        fila.innerHTML = `
          <td>${r.paciente}</td>
          <td>${r.especialista}</td>
          <td>${r.servicio}</td>
          <td>${r.costo}</td>
          <td>${r.dia}</td>
          <td>${r.hora}</td>
          <td>$${r.pagoEspecialista.toFixed(2)}</td>
          <td><button class="editar" onclick="editarRegistro(${i})" aria-label="Editar registro de ${r.paciente}">Editar</button></td>
        `;
      });
    }

    // Calcular pago especialista seg√∫n reglas
    function calcularPagoEspecialista(servicio, costo, especialista) {
      if (especialista === "Lic Cynthia" && servicio === "Terapia de Lenguaje" && costo === 120) {
        return 90;
      }
      const mapa = {
        "Psicolog√≠a Infantil": costo === 150 ? 100 : 130,
        "Psicolog√≠a Adulto": 150,
        "Medico Especialista en rehabilitaci√≥n": costo - 1800,
        "Consulta Medica": 10,
        Audiolog√≠a: 50,
        "Estimulaci√≥n temprana": 50,
        Nutrici√≥n: 150,
        "Terapia F√≠sica": 150,
        "Terapia Ocupacional": 50,
        "Terapia de Lenguaje": costo === 100 ? 70 : 80,
      };
      return mapa[servicio] ?? costo * 0.7;
    }

    // Actualizar ganancias resumen
    function actualizarGanancias() {
      tablaGanancias.innerHTML = "";
      tablaServicios.innerHTML = "";
      const pagosEspecialistas = {};
      const ingresosServicios = {};
      let gananciaOficinaTotal = 0;

      registros.forEach((r) => {
        pagosEspecialistas[r.especialista] = (pagosEspecialistas[r.especialista] || 0) + r.pagoEspecialista;
        ingresosServicios[r.servicio] = (ingresosServicios[r.servicio] || 0) + r.costo;
        gananciaOficinaTotal += r.costo - r.pagoEspecialista;
      });

      Object.entries(pagosEspecialistas).forEach(([especialista, total]) => {
        const fila = tablaGanancias.insertRow();
        fila.innerHTML = `<td>${especialista}</td><td>$${total.toFixed(2)}</td>`;
      });

      Object.entries(ingresosServicios).forEach(([servicio, total]) => {
        const fila = tablaServicios.insertRow();
        fila.innerHTML = `<td>${servicio}</td><td>$${total.toFixed(2)}</td>`;
      });

      gananciaOficina.textContent = `$${gananciaOficinaTotal.toFixed(2)}`;
    }

    // Borrar registros
    function borrarRegistros() {
      const confirmar = confirm("¬øEst√°s seguro de que deseas borrar todos los registros del d√≠a?");
      if (confirmar) {
        localStorage.removeItem("registros");
        registros = [];
        indiceEditando = null;
        actualizarTabla();
        actualizarGanancias();
        document.getElementById("formulario").reset();
        actualizarOpcionesCosto();
        document.querySelector(".guardar").textContent = "Guardar Registro";
        document.getElementById("btn-cancelar-edicion").style.display = "none";
        mostrarToast("Registros borrados con √©xito.", "success");
        cargarFiltros();
        filtrarRegistros();
      }
    }

    // Exportar a Excel
    function exportarExcel() {
      if (registros.length === 0) {
        mostrarToast("No hay registros para exportar.", "warning");
        return;
      }
      const wb = XLSX.utils.book_new();
      const ws_data = [
        ["Paciente", "Especialista", "Servicio", "Costo", "D√≠a", "Hora", "Pago Especialista"],
      ];
      registros.forEach((r) => {
        ws_data.push([
          r.paciente,
          r.especialista,
          r.servicio,
          r.costo,
          r.dia,
          r.hora,
          r.pagoEspecialista,
        ]);
      });
      const ws = XLSX.utils.aoa_to_sheet(ws_data);
      XLSX.utils.book_append_sheet(wb, ws, "Registros");
      XLSX.writeFile(wb, `registros_${new Date().toISOString().split("T")[0]}.xlsx`);
      mostrarToast("Archivo Excel descargado.", "success");
    }

    // Cargar opciones √∫nicas para filtros desde los registros actuales
    function cargarFiltros() {
      const filtroEspecialista = document.getElementById("filtro-especialista");
      const filtroServicio = document.getElementById("filtro-servicio");

      // Guardar selecci√≥n actual
      const seleccionadoEsp = filtroEspecialista.value;
      const seleccionadoServ = filtroServicio.value;

      filtroEspecialista.innerHTML = `<option value="">Todos los especialistas</option>`;
      filtroServicio.innerHTML = `<option value="">Todos los servicios</option>`;

      // Obtener √∫nicos especialistas y servicios
      const especialistasUnicos = [...new Set(registros.map(r => r.especialista))].sort();
      const serviciosUnicos = [...new Set(registros.map(r => r.servicio))].sort();

      especialistasUnicos.forEach(e => {
        const opt = document.createElement("option");
        opt.value = e;
        opt.textContent = e;
        filtroEspecialista.appendChild(opt);
      });

      serviciosUnicos.forEach(s => {
        const opt = document.createElement("option");
        opt.value = s;
        opt.textContent = s;
        filtroServicio.appendChild(opt);
      });

      // Restaurar selecci√≥n si existe
      filtroEspecialista.value = seleccionadoEsp;
      filtroServicio.value = seleccionadoServ;
    }

    // Filtrar registros seg√∫n b√∫squeda y filtros seleccionados
    function filtrarRegistros() {
      const textoBusqueda = document.getElementById("busqueda").value.toLowerCase();
      const filtroEsp = document.getElementById("filtro-especialista").value;
      const filtroServ = document.getElementById("filtro-servicio").value;

      const filtrados = registros.filter(r => {
        const combinado = (r.paciente + " " + r.especialista + " " + r.servicio).toLowerCase();
        const cumpleBusqueda = combinado.includes(textoBusqueda);
        const cumpleEspecialista = filtroEsp ? r.especialista === filtroEsp : true;
        const cumpleServicio = filtroServ ? r.servicio === filtroServ : true;
        return cumpleBusqueda && cumpleEspecialista && cumpleServicio;
      });

      actualizarTabla(filtrados);
    }

    // Inicializaci√≥n al cargar la p√°gina
    window.onload = function () {
      actualizarOpcionesCosto();
      actualizarTabla();
      actualizarGanancias();
      cargarFiltros();
    };
  </script>
</body>
</html>
